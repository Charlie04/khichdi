2.Circular queue

#include<stdio.h>

#define MAX 5
int queue[MAX];
int front = -1; rear = -1;

void enqueue (int data){
if((front == 0 && rear == MAX-1) || (rear == front-1)) {

    printf("Circular Queue Overflow\n");
}else{
if(front == -1)front = 0;
rear = (rear+1)% MAX;
queue[rear] = data;
printf("Enqueued %d to circular queue\n",data);

}
}

void dequeue(){
if(front == -1){
    printf("Circular Queue Underflow\n");
}
else{
    printf("Dequeued %d from circular queue\n",queue[front]);
    if(front == rear){
        front = rear = -1;
    }
    else{
        front = (front+1)% MAX;
    }
}
}

void display() {
if(front == -1){
    printf("Circular Queue is Empty\n");
}
else{
    printf("Circular Queue elements are:\n");
    int i = front;
    while(1){
        printf("%d\n",queue[i]);
        if(i == rear)break;
        i=(i+1)% MAX;
    }
}
}
int main(){
enqueue(10);
enqueue(20);
enqueue(30);
enqueue(40);
enqueue(50);
display();
dequeue();
display();
return 0;
}
