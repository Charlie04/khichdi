2.Priority Queue

#include<stdio.h>
#define MAX 10
struct PriorityQueue {
int data;
int priority;
};
struct PriorityQueue pq[MAX];
int n=0;

void enqueue (int data, int priority)
{
    if(n==MAX){
    printf("Priority Queue overflow\n");
    return;
    }
    int i;
    for(i=n-1;i>=0 && pq[i].priority>priority; i--){
        pq[i+1]=pq[i];
    }

pq[i+1].data = data;
pq[i+1].priority = priority;
n++;
printf("Enqueued %d with priority %d to priority queue\n",data,priority);
}

void dequeue(){
if(n==0){
    printf("Priority Queue Overflow\n");
}else {
printf("Dequeued %d from priority queue\n",pq[0].data);
for(int i=0; i<n-1;i++){
    pq[i]=pq[i+1];
}
n--;
}
}

void display() {
if(n==0){
    printf("Priority Queue is Empty\n");
}else{
printf("Priority Queue elements are:\n");
for(int i=0; i<n;i++){
    printf("Data:%d,Priority:%d\n",pq[i].data,pq[i].priority);
}
}
}

int main() {
enqueue(10,0);
enqueue(20,1);
enqueue(30,2);
enqueue(40,3);
enqueue(50,4);
enqueue(60,5);
enqueue(70,6);
enqueue(80,7);
enqueue(90,8);
enqueue(100,9);
display();
dequeue();
display();
return 0;
}
